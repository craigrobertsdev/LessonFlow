@using LessonFlow.Exceptions
@using LessonFlow.Interfaces.Persistence
@using LessonFlow.Shared

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["output.css"]" /> 
    @* <link rel="stylesheet" href="@Assets["LessonFlow.styles.css"]" /> *@
    @* <link rel="stylesheet" href="@Assets["tailwindcss.css"]" /> *@
    <ImportMap />
    <link rel="icon" type="image/png" href="favicon.png" />
    <title>Lesson Flow</title>
    <HeadOutlet @rendermode="InteractiveServer" />
    <RadzenTheme Theme="material" @rendermode="InteractiveServer" />
</head>

<body>
    <Routes @rendermode="InteractiveServer"/>

    <script src="_framework/blazor.web.js"></script>
    <script src="Components/Pages/TextEditor.razor.js"></script>
    <script src="_content/Radzen.Blazor/Radzen.Blazor.js?v=@(typeof(Radzen.Colors).Assembly.GetName().Version)"></script>
</body>

</html>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthStateTask { get; set; } = default!;
    [Inject] private AppState AppState { get; set; } = default!;
    [Inject] private IUserRepository UserRepository { get; set; } = default!;

    protected override async Task OnParametersSetAsync()
    {
        if (AppState.IsInitialised) return;

        var hash = AppState.GetHashCode();
        var authState = await AuthStateTask;
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            try
            {
                var email = authState.User.Identity.Name!;
                var user = await UserRepository.GetByEmail(email, CancellationToken.None);
                if (user is null)
                {
                    throw new UserNotFoundException();
                }

                AppState.User = user;
                if (user.AccountSetupComplete)
                {
                    var yearData = await UserRepository.GetYearDataByYear(user.Id, user.LastSelectedYear, CancellationToken.None)
                        ?? throw new YearDataNotFoundException();
                    AppState.YearData = yearData;
                    AppState.YearData.WeekPlannerTemplate.SortPeriods();
                }
                else
                {
                    user.AccountSetupState?.WeekPlannerTemplate.SortPeriods();
                }

                AppState.IsInitialised = true;
            }
            catch { }
        }
    }
}
