@using LessonFlow.Shared
@implements IDisposable

@inject NavigationManager NavigationManager

<nav class="nav">
  <div class="nav-item px-3">
    <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
      Home
    </NavLink>
  </div>

  <AuthorizeView>
    <Authorized>
      @if (AppState.User is not null && AppState.User.AccountSetupComplete) {
      <div>
        <NavLink href="lessonplanner">
          Lesson Planner
        </NavLink>
      </div>
      }

      <form action="Account/Logout" method="post">
        <AntiforgeryToken/>
        <input type="hidden" name="ReturnUrl" value="@_currentUrl"/>
        <button type="submit" class="nav-link">
          <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
        </button>
      </form>
    </Authorized>

    <NotAuthorized>
      <div class="nav-item px-3">
        <NavLink href="/Account/Register">
          Register
        </NavLink>
      </div>

      <div class="nav-item px-3">
        <NavLink href="/Account/Login">
          Login
        </NavLink>
      </div>
    </NotAuthorized>
  </AuthorizeView>
</nav>

@code {
  [CascadingParameter] AppState AppState { get; set; } = null!;
  string? _currentUrl;
  
  protected override void OnInitialized()
  {
    _currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
    NavigationManager.LocationChanged += OnLocationChanged;
  }

  void OnLocationChanged(object? sender, LocationChangedEventArgs e)
  {
    _currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
    StateHasChanged();
  }

  public void Dispose()
  {
    NavigationManager.LocationChanged -= OnLocationChanged;
  }
}