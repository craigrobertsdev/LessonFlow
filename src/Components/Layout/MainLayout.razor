@using LessonFlow.Shared
@using Radzen.Blazor
@inherits LayoutComponentBase

<RadzenComponents @rendermode="InteractiveServer" />

@if (_isInitializing)
{
    <div class="min-h-screen flex items-center justify-center">
        <div class="text-center">
            <div class="mb-4 inline-block h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-transparent align-[-0.125em]"></div>
            <p class="text-sm text-gray-600">Loading...</p>
        </div>
    </div>
}
else
{
    <CascadingValue Value="AppState">
        <div class="bg-gray-100 min-h-screen flex flex-col flex-grow">
            <aside class="border-r border-gray-200">
                <div class="h-full overflow-y-auto p-4">
                    <NavMenu />
                </div>
            </aside>

            <main class="flex-1">
                <div class="max-w-7xl mx-auto p-4 sm:p-6 lg:p-8">
                    @Body
                </div>
            </main>
        </div>
    </CascadingValue>
}

<div id="blazor-error-ui" data-nosnippet style="display:none"
     class="fixed bottom-0 left-0 right-0 bg-red-50 border-t border-red-200 text-red-800 px-4 py-2 text-sm shadow">
    <div class="flex items-center justify-between w-full">
        <span>An unhandled error has occurred.</span>
        <div class="space-x-4">
            <a href="." class="reload underline font-medium hover:text-red-900">Reload</a>
            <span class="dismiss cursor-pointer">🗙</span>
        </div>
    </div>
</div>

@code {
    [Inject] private AppState AppState { get; set; } = default!;
    [Inject] private ILogger<MainLayout> Logger { get; set; } = default!;
    private bool _isInitializing = true;
    private bool _hasInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("MainLayout OnInitializedAsync called. HasInitialized: {HasInitialized}, AppState.IsInitialised: {AppStateInitialized}", 
            _hasInitialized, AppState.IsInitialised);

        if (_hasInitialized) 
        {
            Logger.LogInformation("MainLayout already initialized, skipping");
            _isInitializing = false;
            return;
        }

        _hasInitialized = true;
        Logger.LogInformation("Starting MainLayout initialization");

        try
        {
            if (!AppState.IsInitialised && !AppState.Initialising)
            {
                await AppState.InitialiseAsync();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during MainLayout initialization");
        }
        finally
        {
            _isInitializing = false;
        }
    }
}
