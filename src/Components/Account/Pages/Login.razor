@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using LessonFlow.Domain.Users
@using LessonFlow.Domain.YearDataRecords
@using LessonFlow.Exceptions
@using LessonFlow.Interfaces.Persistence
@using LessonFlow.Shared
@using LessonFlow.Shared.Interfaces.Persistence
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity

@inject SignInManager<User> SignInManager
@inject IUserRepository UserRepository
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Log in</PageTitle>

<div class="max-w-5xl mx-auto p-6">
  <h1 class="text-2xl font-semibold text-gray-900 mb-6">Log in</h1>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <div class="lg:col-span-2">
      <section class="bg-white rounded-lg shadow p-6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
          <DataAnnotationsValidator />
          <h2 class="text-lg font-medium text-gray-900 mb-4">Use a local account to log in.</h2>
          <hr class="border-gray-200 mb-4" />

          <ValidationSummary class="text-sm text-red-600 mb-4" role="alert" />

          <div class="mb-4">
            <label for="Input.Email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <InputText @bind-Value="Input.Email" id="Input.Email"
                       class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                       autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-sm text-red-600 mt-1" />
          </div>

          <div class="mb-4">
            <label for="Input.Password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                       class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                       autocomplete="current-password" aria-required="true" placeholder="password" />
            <ValidationMessage For="() => Input.Password" class="text-sm text-red-600 mt-1" />
          </div>

          <div class="mb-4">
            <label class="inline-flex items-center gap-2 text-sm text-gray-700">
              <InputCheckbox @bind-Value="Input.RememberMe"
                             class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
              Remember me
            </label>
          </div>

          <div class="mb-4">
            <button type="submit"
                    class="w-full inline-flex items-center justify-center px-4 py-2 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
              Log in
            </button>
          </div>

          <div class="space-y-2 text-sm">
            <p>
              <a class="text-blue-600 hover:text-blue-700" href="Account/ForgotPassword">Forgot your password?</a>
            </p>
            <p>
              <a class="text-blue-600 hover:text-blue-700"
                 href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">
                Register as a new user
              </a>
            </p>
            <p>
              <a class="text-blue-600 hover:text-blue-700" href="Account/ResendEmailConfirmation">Resend email confirmation</a>
            </p>
          </div>
        </EditForm>
      </section>
    </div>

    <div>
      <section class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Use another service to log in.</h3>
        <hr class="border-gray-200 mb-4" />
        <ExternalLoginPicker />
      </section>
    </div>
  </div>
</div>

@code {
  private string? errorMessage;

  [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
  [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

  protected override async Task OnInitializedAsync()
  {
    var ctx = HttpContextAccessor.HttpContext;
    if (ctx is not null && HttpMethods.IsGet(ctx.Request.Method))
    {
      await ctx.SignOutAsync(IdentityConstants.ExternalScheme);
    }
  }

  public async Task LoginUser()
  {
    var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
    if (result.Succeeded)
    {
      var user = await UserRepository.GetByEmail(Input.Email, CancellationToken.None)
          ?? throw new UserNotFoundException();

      if (!user.AccountSetupComplete)
      {
        NavigationManager.NavigateTo("/AccountSetup", new NavigationOptions { ReplaceHistoryEntry = true });
      }
      else
      {
        NavigationManager.NavigateTo("/WeekPlanner", new NavigationOptions { ReplaceHistoryEntry = true });
      }

      Logger.LogInformation("User logged in.");
    }
    else if (result.RequiresTwoFactor)
    {
      RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
    }
    else if (result.IsLockedOut)
    {
      Logger.LogWarning("User account locked out.");
      RedirectManager.RedirectTo("Account/Lockout");
    }
    else
    {
      var user = await UserRepository.GetByEmail(Input.Email, CancellationToken.None);
      if (user is not null && !user.EmailConfirmed)
      {
        RedirectManager.RedirectTo("Account/RegisterConfirmation", new() { ["email"] = user.Email, ["returnUrl"] = "AccountSetup" });
      }

      errorMessage = "Error: Invalid login attempt.";
    }
  }

  private sealed class InputModel
  {
    [Required][EmailAddress] public string Email { get; set; } = "";
    [Required][DataType(DataType.Password)] public string Password { get; set; } = "";
    [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
  }
}