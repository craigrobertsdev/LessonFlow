@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using LessonFlow.Domain.StronglyTypedIds
@using LessonFlow.Domain.Users
@using LessonFlow.Domain.YearDataRecords
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<User> UserManager
@inject IUserStore<User> UserStore
@inject SignInManager<User> SignInManager
@inject IEmailSender<User> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<div class="max-w-5xl mx-auto p-6">
  <h1 class="text-2xl font-semibold text-gray-900 mb-6">Register</h1>

  <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
    <div class="lg:col-span-2">
      <section class="bg-white rounded-lg shadow p-6">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
          <DataAnnotationsValidator />
          <h2 class="text-lg font-medium text-gray-900 mb-4">Create a new account.</h2>
          <hr class="border-gray-200 mb-4" />

          <ValidationSummary class="text-sm text-red-600 mb-4" role="alert" />

          <div class="mb-4">
            <label for="Input.Email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
            <InputText @bind-Value="Input.Email" id="Input.Email"
                       class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                       autocomplete="username" aria-required="true" placeholder="name@example.com" />
            <ValidationMessage For="() => Input.Email" class="text-sm text-red-600 mt-1" />
          </div>

          <div class="mb-4">
            <label for="Input.Password" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
            <InputText type="password" @bind-Value="Input.Password" id="Input.Password"
                       class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                       autocomplete="new-password" aria-required="true" placeholder="password" />
            <ValidationMessage For="() => Input.Password" class="text-sm text-red-600 mt-1" />
          </div>

          <div class="mb-6">
            <label for="Input.ConfirmPassword" class="block text-sm font-medium text-gray-700 mb-1">Confirm Password</label>
            <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword"
                       class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
                       autocomplete="new-password" aria-required="true" placeholder="password" />
            <ValidationMessage For="() => Input.ConfirmPassword" class="text-sm text-red-600 mt-1" />
          </div>

          <button type="submit"
                  class="w-full inline-flex items-center justify-center px-4 py-2 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700">
            Register
          </button>
        </EditForm>
      </section>
    </div>

    <div>
      <section class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-medium text-gray-900 mb-4">Use another service to register.</h3>
        <hr class="border-gray-200 mb-4" />
        <ExternalLoginPicker />
      </section>
    </div>
  </div>
</div>

@code {
  private IEnumerable<IdentityError>? identityErrors;

  [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

  [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

  private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

  public async Task RegisterUser(EditContext editContext)
  {
    var user = CreateUser();

    await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
    var emailStore = GetEmailStore();
    await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
    var result = await UserManager.CreateAsync(user, Input.Password);

    if (!result.Succeeded)
    {
      identityErrors = result.Errors;
      return;
    }

    Logger.LogInformation("User created a new account with password.");

    var userId = await UserManager.GetUserIdAsync(user);
    var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
    var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

    await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

    if (UserManager.Options.SignIn.RequireConfirmedAccount)
    {
      RedirectManager.RedirectTo(
          "Account/RegisterConfirmation",
          new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
    }

    await SignInManager.SignInAsync(user, isPersistent: false);
    RedirectManager.RedirectTo(ReturnUrl);
  }

  private User CreateUser()
  {
    try
    {
      var user = Activator.CreateInstance<User>();
      return user;
    }
    catch
    {
      throw new InvalidOperationException($"Can't create an instance of '{nameof(User)}'. Ensure that '{nameof(User)}' is not an abstract class and has a parameterless constructor.");
    }
  }

  private IUserEmailStore<User> GetEmailStore()
  {
    if (!UserManager.SupportsUserEmail)
    {
      throw new NotSupportedException("The default UI requires a user store with email support.");

    }

    return (IUserEmailStore<User>)UserStore;
  }

  private sealed class InputModel
  {
    [Required]
    [EmailAddress]
    [Display(Name = "Email")]
    public string Email { get; set; } = "";

    [Required]
    [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
    [DataType(DataType.Password)]
    [Display(Name = "Password")]
    public string Password { get; set; } = "";

    [DataType(DataType.Password)]
    [Display(Name = "Confirm password")]
    [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
    public string ConfirmPassword { get; set; } = "";
  }
}