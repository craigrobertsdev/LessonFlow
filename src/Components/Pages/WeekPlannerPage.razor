@rendermode InteractiveServer
@attribute [Authorize]
@page "/WeekPlanner"

@using LessonFlow.Components.WeekPlanners
@using Microsoft.AspNetCore.Authorization

<PageTitle>LessonFlow | Week Planner</PageTitle>

@if (AppState.CurrentYearData?.WeekPlannerTemplate == null)
{
    <div class="flex min-h-[40vh] items-center justify-center">
        <div class="text-center">
            @if (AppState.Initialising)
            {
                <div class="mb-4 inline-block h-6 w-6 animate-spin rounded-full border-2 border-gray-300 border-t-transparent align-[-0.125em]"></div>
                <p class="text-sm text-gray-600">Loading week planner...</p>
            }
            else if (AppState.User?.AccountSetupComplete == false)
            {
                <p class="text-sm text-gray-600">Redirecting to account setup...</p>
                NavigationManager.NavigateTo("/AccountSetup", true);
            }
            else
            {
                <p class="text-sm text-red-600">Week planner data not available.</p>
            }
        </div>
    </div>
}
else
{
    <div class="flex gap-6">
        <div style="grid-template-rows:@(_gridRows); grid-template-columns:@_gridTemplateCols" class="grid">
            <div class="row-start-1 col-start-1 flex justify-center items-center border border-gray-100"></div>

            @* Lesson and break headers *@
            @for (int i = 0; i < WeekPlannerTemplate.Periods.Count; i++)
            {
                var period = WeekPlannerTemplate.Periods[i];
                <div class="row-start-@(i + 2) col-start-1 flex flex-col justify-center items-center border border-gray-100 p-1 font-semibold">
                    @period.Name
                </div>
            }

            @for (int i = 0; i < GridCols.Count; i++)
            {
                var col = GridCols[i];
                var dayOfWeek = WeekPlannerTemplate.DayTemplates[i].DayOfWeek;
                if (col.IsWorkingDay)
                {
                    <CascadingValue Value="this">
                        <WeekPlannerColumn Column="col" DayOfWeek="dayOfWeek" />
                    </CascadingValue>

                }
                else
                {
                    <div class="col-start-@(i + 2) row-start-1 border border-gray-100 flex justify-center items-center">@dayOfWeek</div>
                    <div style="grid-column :@(col.Col); grid-row: 2/@(WeekPlannerTemplate.Periods.Count + 2);"
                         class="relative border border-gray-100 bg-[repeating-linear-gradient(-45deg,#f3f4f6_0px,#f3f4f6_12px,#e5e7eb_12px,#e5e7eb_24px)]">
                    </div>
                }
            }
        </div>

        <div>
            <input id="term-date" type="date" @onchange="SelectedTermDateChanged" />
            <button id="go-to-selected-date" @onclick="HandleGoToSelectedDateClicked">Go to Week Planner</button>
            <button id="next-week" @onclick="HandleGoToNextWeek">Next Week</button>
        </div>
    </div>
}
