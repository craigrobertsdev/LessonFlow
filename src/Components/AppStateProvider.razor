@rendermode InteractiveServer

@using System.Security.Claims
@using LessonFlow.Domain.Users
@using LessonFlow.Domain.YearDataRecords
@using LessonFlow.Exceptions
@using LessonFlow.Interfaces.Persistence
@using LessonFlow.Shared
@using Microsoft.AspNetCore.Components.Authorization

<CascadingValue Value=@this IsFixed="true">
    @if (_isAuthenticated && AppState.User is null)
    {
        <p>Loading...</p>
    }
    else
    {
        @ChildContent
    }
</CascadingValue>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;
    [Inject] private IUserRepository UserRepository { get; set; } = default!;
    [Inject] private ILogger<AppStateProvider> Logger { get; set; } = default!;
    [Inject] public AppState AppState { get; set; } = default!;

    private bool _initialized;
    private bool _isAuthenticated = false;

    protected override void OnInitialized()
    {
        AppState.OnStateChanged += HandleUserChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        if (AppState.User is null && !AppState.Initialising) return;
        try
        {
            await AppState.InitialiseAsync();

        }
        catch (UserNotFoundException ex)
        {
            Logger.LogError(ex, "User not found during AppState initialization.");
            NavigationManager.NavigateTo("/Account/Login", new NavigationOptions { ReplaceHistoryEntry = true });
            return;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Unexpected error during AppState initialization.");
            NavigationManager.NavigateTo("/Account/Login", new NavigationOptions { ReplaceHistoryEntry = true });
            return;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("AppStateProvider rendered for the first time.");

            var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri)
                .Trim('/')
                .ToLowerInvariant();

            var isInitialEntry = string.IsNullOrWhiteSpace(path) || path == "account/login" || path == "account/register";

            if (isInitialEntry && AppState.User is not null)
            {
                if (!AppState.User.AccountSetupComplete)
                {
                    if (path != "accountsetup")
                    {
                        NavigationManager.NavigateTo("/AccountSetup", new NavigationOptions { ReplaceHistoryEntry = true });
                    }
                }
                else
                {
                    if (path != "weekplanner")
                    {
                        NavigationManager.NavigateTo("/WeekPlanner", new NavigationOptions { ReplaceHistoryEntry = true });
                    }
                }
            }
        }
    }

    private void HandleUserChanged()
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        AppState.OnStateChanged -= StateHasChanged;
    }
}
