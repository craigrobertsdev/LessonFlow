@using LessonFlow.Components.Enums

<button id="@Id" class="@BaseStyle @ButtonCss @Class" type="button" @onclick="HandleClick" disabled="@Disabled">
    @if (IsLoading)
    {
        <span class="inline-block mr-2">
            <div class="animate-spin h-4 w-4 border-2 border-white border-t-transparent rounded-full "></div>
        </span>
    }
    else
    {
        @ChildContent
    }
</button>

@code {
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public ButtonType Type { get; set; } = ButtonType.Submit;
    [Parameter] public string? Class { get; set; } = string.Empty;
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public bool Disabled { get; set; }

    private bool IsLoading { get; set; }

    private async Task HandleClick()
    {
        try
        {
            if (OnClick.HasDelegate)
            {
                IsLoading = true;
                await OnClick.InvokeAsync(null);
            }
        }
        finally
        {
            IsLoading = false;
        }
    }

    private string BaseStyle = "px-3 py-1 font-md font-semibold rounded-lg active:scale-99 border-0 disabled:opacity-50 disabled:cursor-not-allowed transition ease-in-out duration-150 shadow-sm";

    private string ButtonCss => Type switch
    {
        ButtonType.Submit => "bg-blue-600 hover:bg-blue-700 text-white",
        ButtonType.Add => "bg-emerald-600 text-white hover:bg-emerald-700",
        ButtonType.Delete => "bg-red-600 hover:bg-red-700 text-white",
        ButtonType.Back => "bg-orange-400 hover:bg-orange-500 text-gray-800",
        ButtonType.Cancel => "bg-gray-200 hover:bg-gray-300 text-gray-800",
        _ => "bg-gray-200 hover:bg-gray-300 text-gray-800"
    };
}
