@using LessonFlow.Components.WeekPlanners
@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using LessonFlow.Shared.Interfaces

<div class="grid grid-rows-subgrid grid-cols-subgrid row-span-full @(IsCurrentWeekday() ? "border border-gray-400" : "")"
     style="grid-column:@Column.Col">

    <div class="row-start-1 border border-gray-100 flex flex-col justify-center items-center @(IsCurrentWeekday() ? "border-gray-400 bg-gray-400" : "")">
        <p class="font-bold">
            @DayOfWeek
        </p>
        <p>
            @Date.ToString("MMM d")
        </p>
    </div>

    @foreach (var cell in Column.Cells)
    {
        if (cell.Period.PeriodType == PeriodType.Break)
        {
            <div class="border border-gray-300 text-center"
                 style="grid-column-start:@Column.Col; grid-row-start:@cell.RowSpans[0].Start">
                <div class="w-full p-1">
                    <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
                           placeholder="Duty name" />
                </div>
            </div>
        }
        else
        {
            <CascadingValue Value="this">
                @foreach (var span in cell.RowSpans)
                {
                <WeekPlannerCell Column="Column" Cell="cell" RowSpan="span" />
                }
            </CascadingValue>
        }
    }
</div>

@code {

    [Parameter] public GridColumn Column { get; set; } = default!;
    [Parameter] public DayOfWeek DayOfWeek { get; set; }
    [Parameter] public DateOnly Date { get; set; }

    bool IsCurrentWeekday() => DateTime.Now.DayOfWeek == DayOfWeek;
}
