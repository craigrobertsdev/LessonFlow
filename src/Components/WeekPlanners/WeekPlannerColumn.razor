@using LessonFlow.Components.Pages
@using LessonFlow.Components.WeekPlanners
@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using LessonFlow.Domain.WeekPlanners
@using LessonFlow.Shared.Interfaces

<div class="grid grid-rows-subgrid grid-cols-subgrid row-span-full @(IsCurrentWeekday() ? "border border-gray-400" : "")"
     style="grid-column:@Column.Col">

    <div class="row-start-1 border border-gray-100 flex flex-col justify-center items-center @(IsCurrentWeekday() ? "border-gray-400 bg-gray-400" : "")">
        <p class="font-bold">
            @DayPlan.DayOfWeek
        </p>
        <p>
            @DayPlan.Date.ToString("MMM d")
        </p>
    </div>

    <div class="row-start-2 flex justify-center items-center border border-gray-100 bg-gray-200">
        @if (WeekPlanner.EditingDuties)
        {
            <input id=@($"before-school-duty-{Column.Col}") value="@(DayPlan.BeforeSchoolDuty ?? string.Empty)" @onchange="@(HandleBeforeSchoolDutyChanged)"
                   class="h-full box-border border-2 focus:ring-0 border-gray-100 bg-white rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
                   placeholder="Duty name" />
        }
        else
        {
            <p>@(DayPlan.BeforeSchoolDuty ?? string.Empty)</p>
        }
    </div>

    @foreach (var cell in Column.Cells)
    {
        if (cell.Period.PeriodType == PeriodType.Break)
        {
            <div class="border border-gray-100 bg-gray-200 text-center"
                 style="grid-column-start:@Column.Col; grid-row-start:@cell.RowSpans[0].Start">
                <div class="w-full h-full p-1 flex justify-center items-center">
                    @if (WeekPlanner.EditingDuties)
                    {
                        <input id=@($"break-duty-{Column.Col}-{cell.PeriodNumber}") value="@GetBreakPeriodDutyName(cell)" @onchange="@(e => HandleBreakDutyChanged(e, cell))"
                               class="h-full box-border border-2 focus:ring-0 border-gray-100 bg-white rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
                               placeholder="Duty name" />
                    }
                    else
                    {
                        <p class="h-full w-full flex items-center justify-center">
                            @GetBreakPeriodDutyName(cell)
                        </p>
                    }
                </div>
            </div>
        }
        else
        {
            <CascadingValue Value="this">
                @foreach (var span in cell.RowSpans)
                {
                    <WeekPlannerCell Column="Column" Cell="cell" RowSpan="span" />
                }
            </CascadingValue>
        }
    }

    <div class="row-start-[-1] border border-gray-100 bg-gray-200 flex justify-center items-center">
        @if (WeekPlanner.EditingDuties)
        {
            <input id=@($"before-school-duty-{Column.Col}") value="@(DayPlan.BeforeSchoolDuty ?? string.Empty)" @onchange="@(HandleAfterSchoolDutyChanged)"
                   class="h-full box-border border-2 focus:ring-0 border-gray-100 bg-white rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
                   placeholder="Duty name" />
        }
        else
        {
            <p>@(DayPlan.AfterSchoolDuty ?? string.Empty)</p>
        }
    </div>
</div>

@code {
    [CascadingParameter] public WeekPlannerPage WeekPlanner { get; set; } = default!;
    [Parameter] public GridColumn Column { get; set; } = default!;
    [Parameter] public DayPlan DayPlan { get; set; } = default!;

    bool IsCurrentWeekday() => DateTime.Now.DayOfWeek == DayPlan.DayOfWeek;

    private void HandleBreakDutyChanged(ChangeEventArgs e, GridCell cell)
    {
        if (!Column.IsWorkingDay) return;

        if (e.Value is string newValue && cell.Period is BreakPeriod period)
        {
            WeekPlanner.HandleBreakNameChanged(DayPlan.DayOfWeek, period, newValue);
        }
    }

    private void HandleBeforeSchoolDutyChanged(ChangeEventArgs e)
    {
        if (!Column.IsWorkingDay) return;
        if (e.Value is string newValue)
        {
            WeekPlanner.HandleBeforeSchoolDutyChanged(DayPlan.DayOfWeek, newValue);
        }
    }

    private void HandleAfterSchoolDutyChanged(ChangeEventArgs e)
    {
        if (!Column.IsWorkingDay) return;
        if (e.Value is string newValue)
        {
            WeekPlanner.HandleAfterSchoolDutyChanged(DayPlan.DayOfWeek, newValue);
        }
    }

    private string GetBreakPeriodDutyName(GridCell cell)
    {
        if (cell.Period is not BreakPeriod period) return string.Empty;

        DayPlan.BreakDutyOverrides.TryGetValue(cell.PeriodNumber, out var overrideName);
        return overrideName ?? period.BreakDuty ?? string.Empty;
    }
}
