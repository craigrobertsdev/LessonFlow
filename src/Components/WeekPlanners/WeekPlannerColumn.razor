@using LessonFlow.Components.WeekPlanners
@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using LessonFlow.Shared.Interfaces

<div class="grid grid-rows-subgrid grid-cols-subgrid row-span-full @(IsCurrentWeekday() ? "border border-blue-500" : "")"
     style="grid-column:@Column.Col">

    <div class="row-start-1 border border-gray-100 flex justify-center items-center">@DayOfWeek</div>

    @foreach (var cell in Column.Cells)
    {
        if (cell.Period.PeriodType == PeriodType.Break)
        {
            <div class="border border-gray-300 text-center"
                 style="grid-column-start:@Column.Col; grid-row-start:@cell.RowSpans[0].Start">
                <div class="w-full p-1">
                    <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
                           placeholder="Duty name" />
                </div>
            </div>
        }
        else
        {
            foreach (var span in cell.RowSpans)
            {
                var cellText = string.IsNullOrEmpty(((ILessonPeriod)cell.Period).SubjectName) ? "No subject planned" : ((ILessonPeriod)cell.Period).SubjectName;

                <div class="border border-gray-300 flex justify-center items-center @(cell.IsHovered ? "outline outline-gray-500 -outline-offset-1 z-100 opacity-80" : "")
                                             @GetCellColour(cell) select-none @(cell.IsMouseDown ? "opacity-75 scale-99 transition duration-100 ease-in-ease-out" : "")
                                             @(string.IsNullOrEmpty(((ILessonPeriod)cell.Period).SubjectName) ? "text-gray-700" : "font-semibold")"
                     style="grid-column-start:@Column.Col; grid-row-start:@span.Start; grid-row-end:@span.End"
                     @onmouseover="@(() => { cell.IsHovered = true; StateHasChanged(); })"
                     @onmouseout="@(() => { cell.IsHovered = true; StateHasChanged(); })"
                     @onmousedown="@(() => cell.IsHovered = false)"
                     AccountSetup. @onmouseup="@(() => cell.IsMouseDown = false)">
                    @cellText
                </div>
            }
        }
    }
</div>

@code {
    [Parameter] public GridColumn Column { get; set; } = default!;
    [Parameter] public DayOfWeek DayOfWeek { get; set; }

    string GetCellColour(GridCell cell)
    {
        if (cell.Period.PeriodType == PeriodType.Break) return "";
        return AppConstants.SubjectColours.TryGetValue(((ILessonPeriod)cell.Period).SubjectName, out var colour)
                ? colour
                : string.Empty;
    }

    bool IsCurrentWeekday() => DateTime.Now.DayOfWeek == DayOfWeek;
}
