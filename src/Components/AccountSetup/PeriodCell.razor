@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using static LessonFlow.Components.AccountSetup.ScheduleFormNew

<div class="border border-gray-300 text-center @(IsSelected ? "outline outline-3 outline black" : "") @(IsSelected && !Cell.IsFirstCellInBlock ? "border-t-0" : "")"
     style="grid-column:@Cell.Column.Col; grid-row-start:@Cell.Row; grid-row-end:@EndRow"
     @onclick="HandleCellClick">

  @if (Cell is not null && Cell.Period.PeriodType == PeriodType.Break)
  {
    <div class="w-40 p-1">
      <input @bind="@(((BreakPeriod)Cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center"
             placeholder="Duty name" />
    </div>
  }
  else if (Cell?.IsFirstCellInBlock == true)
  {
    <span>
      (@Cell.Row, @Cell.Column.Col)
    </span>
  }
</div>

@code {
  [CascadingParameter] public ScheduleFormNew Parent { get; set; } = default!;
  [Parameter] public GridCell Cell { get; set; } = default!;
  [Parameter] public GridCell? SelectedCell { get; set; }
  [Parameter] public int EndRow { get; set; }
  bool IsSelected => SelectedCell == Cell;

  void HandleCellClick()
  {
    if (Parent.SelectedCell == Cell || Cell.Period.PeriodType == PeriodType.Break)
    {
      Parent.SelectedCell = null;
    }
    else
    {
      Parent.SelectedCell = Cell;
    }
  }
}
