@using LessonFlow.Components.AccountSetup.State
@using LessonFlow.Components.Pages
@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.ValueObjects

<PageTitle>Account Setup - Day Structure</PageTitle>

<div class="max-w-5xl mx-auto p-6 bg-white rounded-lg shadow">
  <div class="mb-8">
    <h3 class="text-xl font-semibold mb-2">Define Your Daily Schedule</h3>
    <p class="text-sm text-gray-600 mb-6">Configure the time slots for your school day. Add and arrange lessons and breaks.</p>

    <div class="mb-8">
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
        <div>
          <label for="startTime" class="block text-sm font-medium text-gray-700 mb-1">School Day Start Time</label>
          <input type="time" id="startTime" @bind="StartTime"
                 class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
        </div>
        <div>
          <label for="endTime" class="block text-sm font-medium text-gray-700 mb-1">School Day End Time</label>
          <input type="time" id="endTime" @bind="EndTime"
                 class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
        </div>
      </div>
    </div>

    <div class="mb-8">
      <h4 class="text-lg font-semibold mb-3">Schedule Slots</h4>
      <div class="overflow-x-auto rounded-md border border-gray-200">
        <table class="min-w-full divide-y divide-gray-200">
          <thead class="bg-gray-50">
            <tr>
              <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Time</th>
              <th scope="col" class="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Time</th>
              <th scope="col" class="px-4 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody class="divide-y divide-gray-100">
            @foreach (var slot in _periods)
            {
              <tr>
                <td class="px-4 py-3 whitespace-nowrap">
                  <input type="text" @bind="slot.Name"
                         class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                </td>
                <td class="px-4 py-3 whitespace-nowrap">
                  <select id="period-type-@slot.StartPeriod" data-testid="period-type" value="@slot.PeriodType" @onchange="e => HandlePeriodTypeChange(e, slot)"
                          class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500">
                    <option value="@PeriodType.Lesson">Lesson</option>
                    <option value="@PeriodType.Break">Break</option>
                  </select>
                </td>
                <td class="px-4 py-3 whitespace-nowrap">
                  <input type="time" @bind="slot.StartTime" @oninput="() => ValidateTimeSlots()"
                         class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                </td>
                <td class="px-4 py-3 whitespace-nowrap">
                  <input type="time" @bind="slot.EndTime" @oninput="() => ValidateTimeSlots()"
                         class="block w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500" />
                </td>
                <td class="px-4 py-3 whitespace-nowrap text-right">
                  <button type="button" @onclick="() => RemoveSlot(slot)"
                          class="text-sm font-medium text-red-600 hover:text-red-700">
                    Remove
                  </button>
                </td>
              </tr>
            }
          </tbody>
        </table>
      </div>

      <div class="mt-4">
        <button type="button" @onclick="AddTimeSlot"
                class="inline-flex items-center px-3 py-2 rounded-md bg-emerald-600 text-white hover:bg-emerald-700">
          <svg class="h-5 w-5 mr-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"
               fill="currentColor" aria-hidden="true">
            <path fill-rule="evenodd"
                  d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z"
                  clip-rule="evenodd" />
          </svg>
          Add Time Slot
        </button>
      </div>

      @if (!string.IsNullOrEmpty(_timeError))
      {
        <div class="mt-4 rounded-md border border-red-200 bg-red-50 px-4 py-2 text-sm text-red-700">
          <p>@_timeError</p>
        </div>
      }
    </div>
  </div>

  <div class="mt-8 flex items-center justify-between">
    <button type="button" @onclick="HandleBack"
            class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
      Back
    </button>
    <button type="button" @onclick="HandleSubmit" disabled="@(State.IsLoading || !string.IsNullOrEmpty(_timeError))"
            class="inline-flex items-center px-4 py-2 rounded-md text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed">
      @if (State.IsLoading)
      {
        <span class="mr-2 inline-flex">
          <span class="inline-block h-4 w-4 animate-spin rounded-full border-2 border-white/60 border-t-white"></span>
        </span>
      }
      Next
    </button>
  </div>
</div>

@code {
    [CascadingParameter]
    public AccountSetupState State { get; set; } = null!;

    [Parameter]
    public Func<Task> SaveChanges { get; set; } = null!;

    private List<TemplatePeriod> _periods = [];
    private TimeOnly StartTime {get; set;}
    private TimeOnly EndTime { get; set; }

    private string? _timeError;

    protected override void OnInitialized()
    {
        _periods = State.WeekPlannerTemplate.Periods.Select(s => new TemplatePeriod(
                s.PeriodType,
                s.StartPeriod,
                s.Name,
                s.StartTime,
                s.EndTime
            )).ToList();

        _periods.Sort((a, b) => a.StartTime.CompareTo(b.StartTime));

        StartTime = State.StartTime;
        EndTime = State.EndTime;
    }

    private void AddTimeSlot()
    {
        var period = new TemplatePeriod(
            PeriodType.Lesson,
            _periods.LastOrDefault()?.StartPeriod + 1 ?? 1,
            $"New Slot {_periods.Count}",
            _periods.LastOrDefault()?.EndTime ?? StartTime,
            EndTime);

        _periods.Add(period);

        ValidateTimeSlots();

        State.WeekPlannerTemplate.AddPeriod(period);
    }

    private void RemoveSlot(TemplatePeriod period)
    {
        _periods.Remove(period);
        ValidateTimeSlots();

        State.WeekPlannerTemplate.RemovePeriod(period);
    }

    private void HandlePeriodTypeChange(ChangeEventArgs e, TemplatePeriod period)
    {
        period.PeriodType = Enum.Parse<PeriodType>(e.Value?.ToString() ?? "Lesson");

        State.WeekPlannerTemplate.UpdatePeriod(period);
    }

    private void ValidateTimeSlots()
    {
        _timeError = null;

        if (_periods.Count == 0)
        {
            _timeError = "You must have at least one time slot";
            return;
        }

        // Check for overlapping time slots
        var sortedSlots = _periods.OrderBy(s => s.StartTime).ToList();
        for (int i = 0; i < sortedSlots.Count - 1; i++)
        {
            if (sortedSlots[i].EndTime > sortedSlots[i + 1].StartTime)
            {
                _timeError = $"Time slots '{sortedSlots[i].Name}' and '{sortedSlots[i + 1].Name}' overlap";
                return;
            }
        }

        // Check for time slots outside school day
        foreach (var slot in _periods)
        {
            if (slot.StartTime < StartTime)
            {
                _timeError = $"Time slot '{slot.Name}' starts before school day";
                return;
            }

            if (slot.EndTime > EndTime)
            {
                _timeError = $"Time slot '{slot.Name}' ends after school day";
                return;
            }
        }

        for (int i= 0; i < _periods.Count; i++)
        {
            _periods[i].StartPeriod = i + 1;
        }
    }

    private async Task HandleBack()
    {
        State.ClearError();
        await SaveChanges();
        State.UpdateStep(AccountSetupStep.Subjects, ChangeDirection.Back);
    }

    private async Task HandleSubmit()
    {
        if (!string.IsNullOrEmpty(_timeError)) return;

        State.UpdateTiming(StartTime, EndTime, _periods);
        State.UpdateStep(AccountSetupStep.Schedule, ChangeDirection.Forward);
    }
}

