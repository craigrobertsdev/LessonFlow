@using LessonFlow.Components.AccountSetup.State
@using LessonFlow.Components.Enums
@using LessonFlow.Components.Shared
@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using LessonFlow.Domain.ValueObjects
@using LessonFlow.Shared

<div class="mb-4 grid grid-rows-[1fr_min-content] grid-cols-2 gap-4">
    <div class="row-start-1 col-span-full shadow-sm border border-gray-200 rounded-md bg-gray-100 p-3 text-center">
        <p><span class="font-semibold">For lessons:</span> Click on a lesson slot below to assign a subject and number of periods for that lesson.</p>
        <p><span class="font-semibold">For breaks:</span> Add the name of any break duties you have throughout the day.</p>
        <br />
        <p class="font-semibold">You can change these after your account is set up.</p>
    </div>

    <div class="row-start-2 flex items-stretch pr-1 rounded-md overflow-hidden shadow-sm border border-gray-200 @(SelectedCell is null ? "bg-gray-200" : "")">
        <div class="px-4 py-2 flex items-center bg-sage-light text-sm font-medium select-none">Number of lessons</div>
        @if (SelectedCell is null)
        {
            <select disabled class="px-3 flex-grow text-sm focus:outline-none">
                <option value="1">1</option>
            </select>
        }
        else
        {
            <select class="px-3 flex-grow text-sm focus:outline-none" id="lesson-duration"
                    disabled="@(SelectedCell is null || SelectedCell.Period.PeriodType == PeriodType.Break)"
                    @onchange="HandleLessonDurationChange"
                    value="@SelectedCell!.Period.NumberOfPeriods">
                @foreach (var n in GetDurationOptions())
                {
                    <option value="@n">@n</option>
                }
            </select>

        }
    </div>

    <div class="row-start-2 col-start-2 flex items-stretch pr-1 rounded-md overflow-hidden shadow-sm border border-gray-200 @(SelectedCell is null ? "bg-gray-200" : "")">
        <div class="px-4 py-2 flex items-center bg-sage-light text-sm font-medium select-none">Subject</div>
        @if (SelectedCell is null || SelectedCell.Period.PeriodType == PeriodType.Break)
        {
            <select disabled class="px-3 flex-grow text-sm focus:outline-none">
                <option value="">Select subject</option>
            </select>
        }
        else
        {
            <select class="px-3 mr-1 flex-grow text-sm focus:outline-none" id="subject-selector"
                    @bind="@(((LessonTemplate)SelectedCell!.Period).SubjectName)">
                <option value="">Select subject</option>
                @foreach (var subject in State.SubjectsTaught)
                {
                    <option value="@subject">@subject</option>
                }
                <option value="NIT">NIT</option>
            </select>
        }
    </div>
</div>

<div style="display:grid; grid-template-rows: @(_gridRows); grid-template-columns: @_gridTemplateCols" class="row-start-3 text-sm mb-4">
    <div class="row-start-1 col-start-1 flex justify-center items-center border border-gray-200"></div>

    <div class="row-start-2 col-start-1 flex justify-center items-center border border-gray-200 bg-gray-100 p-1 font-semibold">
        Before School
    </div>

    @* Lesson and break headers *@
    @for (int i = 0; i < WeekPlannerTemplate.Periods.Count; i++)
    {
        var period = WeekPlannerTemplate.Periods[i];
        <div class="row-start-@(i + 3) col-start-1 flex flex-col justify-center items-center border border-gray-200 p-1 font-semibold @(period.PeriodType == PeriodType.Break ? "bg-gray-100" : "")">
            @period.Name
        </div>
    }

    @for (int i = 0; i < AppConstants.WeekDays.Length; i++)
    {
        <div class="col-start-@(i + 2) row-start-1 border border-gray-200 flex justify-center items-center font-semibold">@AppConstants.WeekDays[i]</div>
    }

    <div class="row-start-[-2] col-start-1 flex justify-center items-center border border-gray-200 bg-gray-100 p-1 font-semibold">
        After School
    </div>

    @for (int i = 0; i < GridCols.Count; i++)
    {
        var col = GridCols[i];
        var dayTemplate = WeekPlannerTemplate.DayTemplates[i];
        if (col.IsWorkingDay)
        {
            <CascadingValue Value="this">
                <ScheduleColumn Column="col" DayTemplate="dayTemplate" />
            </CascadingValue>

        }
        else
        {
            <div style="grid-column:@(col.Col); grid-row: 2/-1"
                 class="relative border border-gray-200 bg-[repeating-linear-gradient(-45deg,#f3f4f6_0px,#f3f4f6_12px,#e5e7eb_12px,#e5e7eb_24px)]">
            </div>
        }
    }

</div>

<div class="flex justify-between">
    <Button OnClick="HandleBack" Type="ButtonType.Back">
        Back
    </Button>
    <Button Id="complete-account-setup" Type="ButtonType.Submit" OnClick="HandleSubmit" Disabled="@State.IsLoading">
        Complete Setup
    </Button>
</div>
