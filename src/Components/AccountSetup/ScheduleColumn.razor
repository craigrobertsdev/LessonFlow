@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using LessonFlow.Shared

@foreach (var cell in Column.Cells)
{
  if (cell.Period.PeriodType == PeriodType.Break)
  {
    <div class="border border-gray-300 text-center 
        @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "") 
        @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell)"
         style="grid-column:@cell.Column.Col; grid-row-start:@cell.RowSpans[0].Start;"
         @onclick="() => HandleCellClick(cell)">
      <div class="w-40 p-1">
        <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
               placeholder="Duty name" />
      </div>
    </div>
  }
  else
  {
    foreach (var span in cell.RowSpans)
    {
      var cellText = string.IsNullOrEmpty(((LessonPeriod)cell.Period).SubjectName) ? "Select subject" : ((LessonPeriod)cell.Period).SubjectName;

      <div class="border border-gray-300 flex justify-center items-center @(cell.IsHovered ? "outline outline-gray-500 -outline-offset-1 z-100 opacity-80" : "") @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "")
              @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell) select-none @(cell.IsMouseDown ? "opacity-75 scale-99 transition duration-100 ease-in-ease-out" : "")
        @(string.IsNullOrEmpty(((LessonPeriod)cell.Period).SubjectName) ? "text-gray-700" : "font-semibold")"
           style="grid-column:@cell.Column.Col; grid-row-start:@span.Start; grid-row-end:@span.End"
           @onclick="() => HandleCellClick(cell)"
					 @onmouseover="@(() => {cell.IsHovered = true; StateHasChanged();})"
					 @onmouseout="@(() => cell.IsHovered = false)"
           @onmousedown="@(() => cell.IsMouseDown = true)"
           @onmouseup="@(() => cell.IsMouseDown = false)">
           @cellText
      </div>
    }
  }
}

@code {
	[CascadingParameter] public ScheduleForm Parent { get; set; } = default!;
	[Parameter] public GridColumn Column { get; set; } = default!;

	bool IsSelected(GridCell cell) => cell == Parent.SelectedCell;

	void HandleCellClick(GridCell cell)
	{
		if (Parent.SelectedCell == cell || cell.Period.PeriodType == PeriodType.Break)
		{
			Parent.SelectedCell = null;
		}
		else
		{
			Parent.SelectedCell = cell;
		}
	}

	string GetCellColour(GridCell cell)
	{
		if (cell.Period.PeriodType == PeriodType.Break) return "";
		return AppConstants.SubjectColours.TryGetValue(((LessonPeriod)cell.Period).SubjectName, out var colour)
				? colour
				: string.Empty;
	}
}
