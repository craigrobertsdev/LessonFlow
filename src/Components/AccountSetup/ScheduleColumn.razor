@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates

@foreach (var cell in Column.Cells)
{
  if (cell.Period.PeriodType == PeriodType.Break)
  {
    <div class="border border-gray-300 text-center 
        @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "") 
        @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell)"
         style="grid-column:@cell.Column.Col; grid-row-start:@cell.RowSpans[0].Start;"
         @onclick="() => HandleCellClick(cell)">
      <div class="w-40 p-1">
        <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
               placeholder="Duty name" />
      </div>
    </div>
  }
  else
  {
    foreach (var span in cell.RowSpans)
    {
      <div class="border border-gray-300 flex justify-center items-center hover:outline hover:outline-gray-500 hover:-outline-offset-1
        @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "") 
        @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell) select-none"
           style="grid-column:@cell.Column.Col; grid-row-start:@span.Start; grid-row-end:@span.End"
           @onclick="() => HandleCellClick(cell)">
        @if (string.IsNullOrEmpty(((LessonPeriod)cell.Period).SubjectName))
        {
          <span class="text-gray-700">Select subject</span>
        }
        else
        {
          <span class="font-semibold">
            @(((LessonPeriod)cell.Period).SubjectName)
          </span>
        }
      </div>
    }
  }
}

@code {
  [CascadingParameter] public ScheduleForm Parent { get; set; } = default!;
  [Parameter] public GridColumn Column { get; set; } = default!;

  bool IsSelected(GridCell cell) => cell == Parent.SelectedCell;
  int CellsRenderedInBlock { get; set; } = 0;

  void HandleCellClick(GridCell cell)
  {
    if (Parent.SelectedCell == cell || cell.Period.PeriodType == PeriodType.Break)
    {
      Parent.SelectedCell = null;
    }
    else
    {
      Parent.SelectedCell = cell;
    }
  }

  string GetCellColour(GridCell cell)
  {
    if (cell.Period.PeriodType == PeriodType.Break) return "";
    return AppConstants.SubjectColours.TryGetValue(((LessonPeriod)cell.Period).SubjectName, out var colour)
        ? colour
        : string.Empty;
  }


}
