@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates
@using LessonFlow.Domain.WeekPlanners
@using LessonFlow.Shared


<div class="row-start-2 flex justify-center items-center border border-gray-100 bg-gray-200 p-1">
    <input id=@($"before-school-duty-{Column.Col}") @bind="DayTemplate.BeforeSchoolDuty" placeholder="Duty name"
           class="h-full box-border border-2 focus:ring-0 border-gray-100 bg-white rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1" />
</div>

@foreach (var cell in Column.Cells)
{
    if (cell.Period.PeriodType == PeriodType.Break)
    {
        <div class="flex justify-center items-center border border-gray-100 bg-gray-200 p-1" style="grid-column:@cell.Column.Col; grid-row-start:@cell.RowSpans[0].Start;">
            <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)"
                   class="h-full box-border border-2 focus:ring-0 border-gray-100 bg-white rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
                   placeholder="Duty name" />
        </div>
    }
    else
    {
        foreach (var span in cell.RowSpans)
        {
            var cellText = string.IsNullOrEmpty(((LessonPeriod)cell.Period).SubjectName) ? "Select subject" : ((LessonPeriod)cell.Period).SubjectName;

            <div class="border border-gray-300 flex justify-center items-center @(cell.IsHovered ? "outline outline-gray-500 -outline-offset-1 z-100 opacity-80" : "") @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "")
                                         @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell) select-none @(cell.IsMouseDown ? "opacity-75 scale-99 transition duration-100 ease-in-ease-out" : "")
                                         @(string.IsNullOrEmpty(((LessonPeriod)cell.Period).SubjectName) ? "text-gray-700" : "font-semibold")"
                 style="grid-column:@cell.Column.Col; grid-row-start:@span.Start; grid-row-end:@span.End"
                 @onclick="() => HandleCellClick(cell)"
                 @onmouseover="@(() => { cell.IsHovered = true; StateHasChanged(); })"
                 @onmouseout="@(() => cell.IsHovered = false)"
                 @onmousedown="@(() => cell.IsMouseDown = true)"
                 @onmouseup="@(() => cell.IsMouseDown = false)">
                @cellText
            </div>
        }
    }
}

<div class="row-start-[-2] border border-gray-100 bg-gray-200 flex justify-center items-center p-1">
    <input id=@($"before-school-duty-{Column.Col}") @bind="DayTemplate.BeforeSchoolDuty"
           class="h-full box-border border-2 focus:ring-0 border-gray-100 bg-white rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
           placeholder="Duty name" />
</div>


@code {
    [CascadingParameter] public ScheduleForm Parent { get; set; } = default!;
    [Parameter] public GridColumn Column { get; set; } = default!;
    [Parameter] public DayTemplate DayTemplate { get; set; } = default!;

    private bool IsSelected(GridCell cell) => cell == Parent.SelectedCell;

    private void HandleCellClick(GridCell cell)
    {
        if (Parent.SelectedCell == cell || cell.Period.PeriodType == PeriodType.Break)
        {
            Parent.SelectedCell = null;
        }
        else
        {
            Parent.SelectedCell = cell;
        }
    }

    private string GetCellColour(GridCell cell)
    {
        if (cell.Period.PeriodType == PeriodType.Break) return string.Empty;

        return AppConstants.SubjectColours.TryGetValue(((LessonPeriod)cell.Period).SubjectName, out var colour)
        ? colour
        : string.Empty;
    }
}
