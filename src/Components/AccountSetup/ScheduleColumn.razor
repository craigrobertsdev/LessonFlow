@using LessonFlow.Domain.Enums
@using LessonFlow.Domain.PlannerTemplates

@* TODO
    - Add support for lessons that span more than 2 periods. They will need to have their backgrounds changed and borders to match. 
    - if cell is null - go back to find the closest non-null cell. Get its subject 
*@

@* @for (int i = 0; i < GridColumn.Cells.Count; i++)
{
  var cell = GridColumn.Cells[i];
  if (cell is null)
  {
    // Go back through the list to the last non-null lesson period and begin rendering the next part of the block of cells
    GridCell? lastRenderedCell = null;
    var idx = i - 1; // - 1 as the first cell in the column should never be null
    while (lastRenderedCell is null)
    {
      lastRenderedCell = GridColumn.Cells[i]?.Period.PeriodType == PeriodType.Lesson ? GridColumn.Cells[i] : null;
      idx--;
    }

    // Keep a count of the number of cells rendered for cell.Period.NumberOfPeriods > 1 and keep rendering them until cellsRendered == cell.Period.NumberOfPeriods
    var end = i + 1 < GridColumn.Cells.Count ? i + 1 : i;
    while (i < GridColumn.Cells.Count)
    {
      if (GridColumn.Cells[i].Period.PeriodType == PeriodType.Break)
      {
        end++;
      }
    }


    <div style="grid-row-start:@lastRenderedCell.Row; grid-row-end:@end;" class=""></div>
    // If the next cell.Period.PeriodType == PeriodType.Break, rowSpan = number of periods in the block (which will be 1 or 2 in the example grid).
    // When selected, all cells on the grid with the same grid cell should be highlighted, this should work when any part of the cell is clicked
    // even if it's not the first in the block
    // The borders of the break cells in the middle of the lesson block should also change to show the continuation of the highlighted lesson.

  }
  else if (cell.Period.PeriodType == PeriodType.Break)
  {
    <div class="border border-gray-300 text-center
                                     @(IsSelected(cell) ? "outline outline-3 outline black" : "") @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "")
                                     @GetCellColour(cell)"
         style="grid-column:@cell.Column.Col; grid-row-start:@cell.Row;"
         @onclick="() => HandleCellClick(cell)">
      <div class="w-40 p-1">
        <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center"
               placeholder="Duty name" />
      </div>
    </div>
  }
  else if (cell)

  else if (cell.Period.NumberOfPeriods == 1)
      {
        <div class="border border-gray-300 text-center
                                         @(IsSelected(cell) ? "outline outline-3 outline black" : "") @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "")
                                         @GetCellColour(cell)"
             style="grid-column:@cell.Column.Col; grid-row-start:@cell.Row;"
             @onclick="() => HandleCellClick(cell)">

          <span>
            (@cell.Row, @cell.Column.Col)
          </span>
        </div>

      }

} *@

@foreach (var cell in Column.Cells)
{
  if (cell.Period.PeriodType == PeriodType.Break)
  {
    <div class="border border-gray-300 text-center 
        @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "") 
        @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell)"
         style="grid-column:@cell.Column.Col; grid-row-start:@cell.RowSpans[0].Start;"
         @onclick="() => HandleCellClick(cell)">
      <div class="w-40 p-1">
        <input @bind="@(((BreakPeriod)cell.Period).BreakDuty)" class="border-2 focus:ring-0 border-gray-300 bg-white p-1 rounded-lg w-full text-center hover:outline hover:outline-gray-500 hover:-outline-offset-1"
               placeholder="Duty name" />
      </div>
    </div>
  }
  else
  {
    foreach (var span in cell.RowSpans)
    {
      <div class="border border-gray-300 flex justify-center items-center hover:outline hover:outline-gray-500 hover:-outline-offset-1
        @(IsSelected(cell) ? "outline outline-2 outline-gray-500 -outline-offset-1 z-100" : "") 
        @(IsSelected(cell) && !cell.IsFirstCellInBlock ? "border-t-0" : "") @GetCellColour(cell) select-none"
           style="grid-column:@cell.Column.Col; grid-row-start:@span.Start; grid-row-end:@span.End"
           @onclick="() => HandleCellClick(cell)">
        @if (string.IsNullOrEmpty(((LessonPeriod)cell.Period).SubjectName))
        {
          <span class="text-gray-700">Select subject</span>
        }
        else
        {
          <span class="font-semibold">
            @(((LessonPeriod)cell.Period).SubjectName)
          </span>
        }
      </div>
    }
  }
}

@code {
  [CascadingParameter] public ScheduleForm Parent { get; set; } = default!;
  [Parameter] public GridColumn Column { get; set; } = default!;

  bool IsSelected(GridCell cell) => cell == Parent.SelectedCell;
  int CellsRenderedInBlock { get; set; } = 0;

  void HandleCellClick(GridCell cell)
  {
    if (Parent.SelectedCell == cell || cell.Period.PeriodType == PeriodType.Break)
    {
      Parent.SelectedCell = null;
    }
    else
    {
      Parent.SelectedCell = cell;
    }
  }

  string GetCellColour(GridCell cell)
  {
    if (cell.Period.PeriodType == PeriodType.Break) return "";
    return AppConstants.SubjectColours.TryGetValue(((LessonPeriod)cell.Period).SubjectName, out var colour)
        ? colour
        : string.Empty;
  }


}
