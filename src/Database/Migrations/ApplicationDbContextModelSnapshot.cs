// <auto-generated />
using System;
using System.Collections.Generic;
using LessonFlow.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LessonFlow.Api.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.Property<Guid>("CalendarId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("uuid");

                    b.HasKey("CalendarId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("CalendarSchoolEvent");
                });

            modelBuilder.Entity("DayPlanSchoolEvent", b =>
                {
                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SchoolEventsId")
                        .HasColumnType("uuid");

                    b.HasKey("DayPlanId", "SchoolEventsId");

                    b.HasIndex("SchoolEventsId");

                    b.ToTable("DayPlanSchoolEvent");
                });

            modelBuilder.Entity("LessonFlow.Components.AccountSetup.State.AccountSetupState", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("integer");

                    b.PrimitiveCollection<int[]>("CompletedSteps")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("CurrentStep")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<bool>("IsLoading")
                        .HasColumnType("boolean");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<string>("SubjectsTaught")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("SubjectsTaught");

                    b.Property<string>("WorkingDays")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("WorkingDays");

                    b.Property<string>("YearLevelsTaught")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("YearLevelsTaught");

                    b.HasKey("Id");

                    b.ToTable("AccountSetupState");
                });

            modelBuilder.Entity("LessonFlow.Domain.Assessments.Assessment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AssessmentType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<DateTime>("DateConducted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PlanningNotes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("LessonFlow.Domain.Calendar.Calendar", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TermEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TermNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("TermStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Calendar");
                });

            modelBuilder.Entity("LessonFlow.Domain.Curriculum.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CurriculumSubjects");
                });

            modelBuilder.Entity("LessonFlow.Domain.Curriculum.YearLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<int>("YearLevelValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("YearLevels", (string)null);
                });

            modelBuilder.Entity("LessonFlow.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DayPlanId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("LessonDate")
                        .HasColumnType("date");

                    b.Property<int>("NumberOfPeriods")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodType")
                        .HasColumnType("integer");

                    b.Property<string>("PlanningNotesHtml")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StartPeriod")
                        .HasColumnType("integer");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DayPlanId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("YearDataId");

                    b.ToTable("LessonPlans");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.DayTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AfterSchoolDuty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BeforeSchoolDuty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("WeekPlannerTemplateId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeekPlannerTemplateId");

                    b.ToTable("DayTemplates", (string)null);
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.PeriodBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("DayTemplateId")
                        .HasColumnType("uuid");

                    b.Property<int>("NumberOfPeriods")
                        .HasColumnType("integer");

                    b.Property<int>("PeriodType")
                        .HasColumnType("integer");

                    b.Property<int>("StartPeriod")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DayTemplateId");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.WeekPlannerTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AccountSetupStateId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("YearDataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AccountSetupStateId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.HasIndex("YearDataId")
                        .IsUnique();

                    b.ToTable("WeekPlannerTemplates");
                });

            modelBuilder.Entity("LessonFlow.Domain.Reports.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("YearLevel")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("LessonFlow.Domain.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("YearDataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("YearDataId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("LessonFlow.Domain.TermPlanners.TermPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("TermNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("TermPlannerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TermPlannerId");

                    b.ToTable("TermPlan");
                });

            modelBuilder.Entity("LessonFlow.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("integer");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("uuid");

                    b.Property<string>("YearLevels")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("YearDataId")
                        .IsUnique();

                    b.ToTable("TermPlanners");
                });

            modelBuilder.Entity("LessonFlow.Domain.Users.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AssociatedStrands")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("YearLevels")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("UserId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("LessonFlow.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("AccountSetupComplete")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateOnly>("LastSelectedWeekStart")
                        .HasColumnType("date");

                    b.Property<int>("LastSelectedYear")
                        .HasColumnType("integer");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LessonFlow.Domain.ValueObjects.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Suburb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("locations", (string)null);
                });

            modelBuilder.Entity("LessonFlow.Domain.ValueObjects.SchoolEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EventStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("FullDay")
                        .HasColumnType("boolean");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("SchoolEvent");
                });

            modelBuilder.Entity("LessonFlow.Domain.ValueObjects.SchoolTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<int>("TermNumber")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TermDates");
                });

            modelBuilder.Entity("LessonFlow.Domain.WeekPlanners.DayPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<string>("AfterSchoolDuty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BeforeSchoolDuty")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("BreakDutyOverrides")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<Guid>("WeekPlannerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WeekPlannerId");

                    b.ToTable("DayPlan");
                });

            modelBuilder.Entity("LessonFlow.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TermNumber")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("WeekNumber")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("WeekStart")
                        .HasColumnType("date");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("YearDataId");

                    b.ToTable("WeekPlanners");
                });

            modelBuilder.Entity("LessonFlow.Domain.YearDataRecords.YearData", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("Id");

                    b.Property<int>("CalendarYear")
                        .HasColumnType("integer");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkingDays")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("YearLevelsTaught")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("YearData");
                });

            modelBuilder.Entity("LessonPlanResource", b =>
                {
                    b.Property<Guid>("LessonPlansId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ResourcesId")
                        .HasColumnType("uuid");

                    b.HasKey("LessonPlansId", "ResourcesId");

                    b.HasIndex("ResourcesId");

                    b.ToTable("LessonPlanResource");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SubjectTermPlan", b =>
                {
                    b.Property<Guid>("SubjectsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TermPlanId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectsId", "TermPlanId");

                    b.HasIndex("TermPlanId");

                    b.ToTable("SubjectTermPlan");
                });

            modelBuilder.Entity("SubjectYearData", b =>
                {
                    b.Property<Guid>("SubjectsTaughtId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("YearDataId")
                        .HasColumnType("uuid");

                    b.HasKey("SubjectsTaughtId", "YearDataId");

                    b.HasIndex("YearDataId");

                    b.ToTable("SubjectYearData");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.BreakPeriod", b =>
                {
                    b.HasBaseType("LessonFlow.Domain.PlannerTemplates.PeriodBase");

                    b.Property<string>("BreakDuty")
                        .HasColumnType("text");

                    b.ToTable("BreakPeriod");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.LessonPeriod", b =>
                {
                    b.HasBaseType("LessonFlow.Domain.PlannerTemplates.PeriodBase");

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("LessonPeriod");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.NitPeriod", b =>
                {
                    b.HasBaseType("LessonFlow.Domain.PlannerTemplates.PeriodBase");

                    b.ToTable("NitPeriod");
                });

            modelBuilder.Entity("CalendarSchoolEvent", b =>
                {
                    b.HasOne("LessonFlow.Domain.Calendar.Calendar", null)
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.ValueObjects.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DayPlanSchoolEvent", b =>
                {
                    b.HasOne("LessonFlow.Domain.WeekPlanners.DayPlan", null)
                        .WithMany()
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.ValueObjects.SchoolEvent", null)
                        .WithMany()
                        .HasForeignKey("SchoolEventsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Components.AccountSetup.State.AccountSetupState", b =>
                {
                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithOne("AccountSetupState")
                        .HasForeignKey("LessonFlow.Components.AccountSetup.State.AccountSetupState", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Domain.Assessments.Assessment", b =>
                {
                    b.HasOne("LessonFlow.Domain.Students.Student", "Student")
                        .WithMany("Assessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("LessonFlow.Domain.Assessments.AssessmentResult", "AssessmentResult", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("AssessmentId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("DateMarked")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id", "AssessmentId");

                            b1.HasIndex("AssessmentId")
                                .IsUnique();

                            b1.ToTable("AssessmentResults", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("AssessmentId");

                            b1.OwnsOne("LessonFlow.Domain.ValueObjects.AssessmentGrade", "Grade", b2 =>
                                {
                                    b2.Property<Guid>("AssessmentResultId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("AssessmentResultAssessmentId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Grade")
                                        .IsRequired()
                                        .HasMaxLength(10)
                                        .HasColumnType("character varying(10)");

                                    b2.Property<double>("Percentage")
                                        .HasColumnType("double precision")
                                        .HasColumnName("Percentage");

                                    b2.HasKey("AssessmentResultId", "AssessmentResultAssessmentId");

                                    b2.ToTable("AssessmentResults");

                                    b2.WithOwner()
                                        .HasForeignKey("AssessmentResultId", "AssessmentResultAssessmentId");
                                });

                            b1.Navigation("Grade")
                                .IsRequired();
                        });

                    b.Navigation("AssessmentResult");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LessonFlow.Domain.Curriculum.YearLevel", b =>
                {
                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", null)
                        .WithMany("YearLevels")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("LessonFlow.Domain.Curriculum.Capability", "Capabilities", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<List<string>>("Descriptors")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("YearLevelId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("YearLevelId");

                            b1.ToTable("Capabilities", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearLevelId");
                        });

                    b.OwnsMany("LessonFlow.Domain.Curriculum.ConceptualOrganiser", "ConceptualOrganisers", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<List<string>>("ConceptualUnderstandings")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("WhatItIs")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("WhyItMatters")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("YearLevelId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("YearLevelId");

                            b1.ToTable("ConceptualOrganisers", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearLevelId");

                            b1.OwnsMany("LessonFlow.Domain.Curriculum.ContentDescription", "ContentDescriptions", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("ConceptualOrganiserId")
                                        .HasColumnType("uuid");

                                    b2.PrimitiveCollection<string[]>("CurriculumCodes")
                                        .IsRequired()
                                        .HasColumnType("text[]");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("Id");

                                    b2.HasIndex("ConceptualOrganiserId");

                                    b2.ToTable("ContentDescriptions", (string)null);

                                    b2.WithOwner("ConceptualOrganiser")
                                        .HasForeignKey("ConceptualOrganiserId");

                                    b2.Navigation("ConceptualOrganiser");
                                });

                            b1.Navigation("ContentDescriptions");
                        });

                    b.OwnsMany("LessonFlow.Domain.Curriculum.Disposition", "Dispositions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.PrimitiveCollection<List<string>>("DevelopedWhen")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("YearLevelId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("YearLevelId");

                            b1.ToTable("Dispositions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("YearLevelId");
                        });

                    b.Navigation("Capabilities");

                    b.Navigation("ConceptualOrganisers");

                    b.Navigation("Dispositions");
                });

            modelBuilder.Entity("LessonFlow.Domain.LessonPlans.LessonPlan", b =>
                {
                    b.HasOne("LessonFlow.Domain.WeekPlanners.DayPlan", null)
                        .WithMany("LessonPlans")
                        .HasForeignKey("DayPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.YearDataRecords.YearData", "YearData")
                        .WithMany("LessonPlans")
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("LessonFlow.Domain.LessonPlans.LessonComment", "Comments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("Completed")
                                .HasColumnType("boolean");

                            b1.Property<DateTime?>("CompletedDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<string>("Content")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<DateTime>("CreatedDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<bool>("StruckOut")
                                .HasColumnType("boolean");

                            b1.Property<DateTime>("UpdatedDateTime")
                                .HasColumnType("timestamp with time zone");

                            b1.HasKey("Id", "LessonPlanId");

                            b1.HasIndex("LessonPlanId");

                            b1.ToTable("LessonComment", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.OwnsMany("LessonFlow.Domain.ValueObjects.TodoItem", "ToDos", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("LessonPlanId")
                                .HasColumnType("uuid");

                            b1.Property<bool>("IsComplete")
                                .HasColumnType("boolean");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id", "LessonPlanId");

                            b1.HasIndex("LessonPlanId");

                            b1.ToTable("TodoItem", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LessonPlanId");
                        });

                    b.Navigation("Comments");

                    b.Navigation("Subject");

                    b.Navigation("ToDos");

                    b.Navigation("YearData");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.DayTemplate", b =>
                {
                    b.HasOne("LessonFlow.Domain.PlannerTemplates.WeekPlannerTemplate", null)
                        .WithMany("DayTemplates")
                        .HasForeignKey("WeekPlannerTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.PeriodBase", b =>
                {
                    b.HasOne("LessonFlow.Domain.PlannerTemplates.DayTemplate", null)
                        .WithMany("Periods")
                        .HasForeignKey("DayTemplateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.WeekPlannerTemplate", b =>
                {
                    b.HasOne("LessonFlow.Components.AccountSetup.State.AccountSetupState", null)
                        .WithOne("WeekPlannerTemplate")
                        .HasForeignKey("LessonFlow.Domain.PlannerTemplates.WeekPlannerTemplate", "AccountSetupStateId");

                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.YearDataRecords.YearData", null)
                        .WithOne("WeekPlannerTemplate")
                        .HasForeignKey("LessonFlow.Domain.PlannerTemplates.WeekPlannerTemplate", "YearDataId");

                    b.OwnsMany("LessonFlow.Domain.ValueObjects.TemplatePeriod", "Periods", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<TimeOnly>("EndTime")
                                .HasColumnType("time without time zone");

                            b1.Property<string>("Name")
                                .HasMaxLength(50)
                                .HasColumnType("character varying(50)");

                            b1.Property<string>("PeriodType")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<int>("StartPeriod")
                                .HasColumnType("integer");

                            b1.Property<TimeOnly>("StartTime")
                                .HasColumnType("time without time zone");

                            b1.Property<Guid>("WeekPlannerTemplateId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("WeekPlannerTemplateId");

                            b1.ToTable("TemplatePeriods", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("WeekPlannerTemplateId");
                        });

                    b.Navigation("Periods");
                });

            modelBuilder.Entity("LessonFlow.Domain.Reports.Report", b =>
                {
                    b.HasOne("LessonFlow.Domain.Students.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.OwnsMany("LessonFlow.Domain.Reports.ReportComment", "ReportComments", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<int>("CharacterLimit")
                                .HasColumnType("integer");

                            b1.Property<string>("Comments")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.Property<string>("Grade")
                                .IsRequired()
                                .HasMaxLength(10)
                                .HasColumnType("character varying(10)");

                            b1.Property<Guid>("ReportId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("ReportId");

                            b1.ToTable("ReportComments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ReportId");
                        });

                    b.Navigation("ReportComments");

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LessonFlow.Domain.Students.Student", b =>
                {
                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.YearDataRecords.YearData", null)
                        .WithMany("Students")
                        .HasForeignKey("YearDataId");
                });

            modelBuilder.Entity("LessonFlow.Domain.TermPlanners.TermPlan", b =>
                {
                    b.HasOne("LessonFlow.Domain.TermPlanners.TermPlanner", "TermPlanner")
                        .WithMany("TermPlans")
                        .HasForeignKey("TermPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TermPlanner");
                });

            modelBuilder.Entity("LessonFlow.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.HasOne("LessonFlow.Domain.YearDataRecords.YearData", null)
                        .WithOne("TermPlanner")
                        .HasForeignKey("LessonFlow.Domain.TermPlanners.TermPlanner", "YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Domain.Users.Resource", b =>
                {
                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany("Resources")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LessonFlow.Domain.ValueObjects.SchoolEvent", b =>
                {
                    b.HasOne("LessonFlow.Domain.ValueObjects.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("LessonFlow.Domain.WeekPlanners.DayPlan", b =>
                {
                    b.HasOne("LessonFlow.Domain.WeekPlanners.WeekPlanner", null)
                        .WithMany("DayPlans")
                        .HasForeignKey("WeekPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.HasOne("LessonFlow.Domain.YearDataRecords.YearData", "YearData")
                        .WithMany("WeekPlanners")
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("YearData");
                });

            modelBuilder.Entity("LessonFlow.Domain.YearDataRecords.YearData", b =>
                {
                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany("YearDataHistory")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonPlanResource", b =>
                {
                    b.HasOne("LessonFlow.Domain.LessonPlans.LessonPlan", null)
                        .WithMany()
                        .HasForeignKey("LessonPlansId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Users.Resource", null)
                        .WithMany()
                        .HasForeignKey("ResourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("LessonFlow.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectTermPlan", b =>
                {
                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.TermPlanners.TermPlan", null)
                        .WithMany()
                        .HasForeignKey("TermPlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SubjectYearData", b =>
                {
                    b.HasOne("LessonFlow.Domain.Curriculum.Subject", null)
                        .WithMany()
                        .HasForeignKey("SubjectsTaughtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LessonFlow.Domain.YearDataRecords.YearData", null)
                        .WithMany()
                        .HasForeignKey("YearDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Components.AccountSetup.State.AccountSetupState", b =>
                {
                    b.Navigation("WeekPlannerTemplate")
                        .IsRequired();
                });

            modelBuilder.Entity("LessonFlow.Domain.Curriculum.Subject", b =>
                {
                    b.Navigation("YearLevels");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.DayTemplate", b =>
                {
                    b.Navigation("Periods");
                });

            modelBuilder.Entity("LessonFlow.Domain.PlannerTemplates.WeekPlannerTemplate", b =>
                {
                    b.Navigation("DayTemplates");
                });

            modelBuilder.Entity("LessonFlow.Domain.Students.Student", b =>
                {
                    b.Navigation("Assessments");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("LessonFlow.Domain.TermPlanners.TermPlanner", b =>
                {
                    b.Navigation("TermPlans");
                });

            modelBuilder.Entity("LessonFlow.Domain.Users.User", b =>
                {
                    b.Navigation("AccountSetupState");

                    b.Navigation("Resources");

                    b.Navigation("YearDataHistory");
                });

            modelBuilder.Entity("LessonFlow.Domain.WeekPlanners.DayPlan", b =>
                {
                    b.Navigation("LessonPlans");
                });

            modelBuilder.Entity("LessonFlow.Domain.WeekPlanners.WeekPlanner", b =>
                {
                    b.Navigation("DayPlans");
                });

            modelBuilder.Entity("LessonFlow.Domain.YearDataRecords.YearData", b =>
                {
                    b.Navigation("LessonPlans");

                    b.Navigation("Students");

                    b.Navigation("TermPlanner");

                    b.Navigation("WeekPlannerTemplate")
                        .IsRequired();

                    b.Navigation("WeekPlanners");
                });
#pragma warning restore 612, 618
        }
    }
}
